#include <stdio.h>
#include <string.h>
#include <math.h>
#include <locale.h>
#include <malloc.h>

float det(float** a, int n) {
    if (n == 1) return a[0][0];
    else
    {
        int nul = 1; //проверяем, если 1 столбец заполнен нулями
        for (int i = 0; i < n; i++) {
            if (a[i][0] != 0) nul = 0;
        }
        if (nul == 1) return 0; // если 1 столбец нулевой, определитель равен нулю
        else
        {

            if (a[0][0] == 0) {  //если а11=0, элементарными преобразованиями исправляем
                int t = 0;
                while (a[t][0] == 0) t++;
                for (int l = 0; l < n; l++) {
                    a[0][l] += a[t][l];
                }
            }
            //for (int g = 0; g < n; g++)  // цикл по строкам
            //{
            //    for (int h = 0; h < n; h++)  // цикл по столбцам
            //    {
            //        printf("%5f ", a[g][h]); // 5 знакомест под элемент массива
            //    }
            //    printf("\n");
            //}
            //printf("\\\\\n");
            for (int i = 1; i < n; i++) { //отнимаем 1 строку с коэфицентом от остальных
                if (a[i][0] != 0) {
                    float kof = a[i][0] / a[0][0]; //находим коэфицент
                    for (int s = 0; s < n; s++) {
                        a[i][s] = a[i][s] - a[0][s] * (kof);
                    }
                }
            }
        }


        


        float** b;  // создаем матрицу с вычеркнутыми 1 строкой и столбцом
        b = (float**)malloc((n - 1) * sizeof(float*));
        // Ввод элементов массива
        for (int i = 0; i < n - 1; i++)
        {
            b[i] = (float*)malloc((n - 1) * sizeof(float));

            for (int j = 0; j < n - 1; j++)
            {
                b[i][j] = a[i + 1][j + 1];
            }
        }
        float d = det(b, n - 1);
        float la = a[0][0];
        free(b);
        return la * d;


    }

}

float wich(float** a, int n, int i, int j) {
    //Создаем матрицу с вычеркнутыми строкой i и столбцом j
    float** nev = (float**)malloc((n-1) * sizeof(float*));
    for (int l = 0; l < n; l++)
    {
        nev[l] = (float*)malloc((n - 1) * sizeof(float));
    }
    int flagi = 0;  int flagj = 0;
    for (int g = 0; g < n-1; g++)
    {
        flagj = 0;
        if (g == i) {
            flagi = 1;
        }
        for (int h = 0; h < n-1; h++)
        {
            if (h == j) {
                flagj = 1;
            }
            nev[g][h] = a[g+flagi][h+flagj];
        }
    }
    float res = det(nev, n - 1);//считаем опр получившися матрицы
   
    return res;

}

int main()
{
    setlocale(LC_ALL, "Rus");
    int n = 0;
    printf("Введите размер матрицы  \n");
    scanf_s("%d", &n);
    printf("Ведите элементы матрицы\n");

    
    float** a;
    a = (float**)malloc(n * sizeof(float*));
    // Считываем массив
    for (int i = 0; i < n; i++)
    {
        a[i] = (float*)malloc(n * sizeof(float));
        for (int j = 0; j < n; j++)
        {
            scanf_s("%f", &a[i][j]);
        }
       
    }

    float** nev = (float**)malloc(n * sizeof(float*));
    for (int l = 0; l < n; l++)
    {
        nev[l] = (float*)malloc(n * sizeof(float));
    }
    //Копируем матрицу  а в новую матрицу
    for (int g = 0; g < n; g++)
    {
        for (int h = 0; h < n; h++)
        {
            nev[g][h] = a[g][h];
        }
    }

    float de = det(nev, n); //Ищем опр-ль начальной матрицы
    free(nev);

    if (de == 0) printf("Матрица вырождена");
    else {
        // Создаем массив, куда запишем опр-ли выч-х матриц
        float** d = (float**)malloc(n * sizeof(float*));
        for (int l = 0; l < n; l++)
        {
            d[l] = (float*)malloc(n * sizeof(float));
        }
        for (int g = 0; g < n; g++)
        {
            for (int h = 0; h < n; h++)
            {
                d[g][h] = wich(a,n,g,h);
            }
        }
        //Выводим матрицу
        printf("А ^(-1)=\n");
        for (int g = 0; g < n; g++)  // цикл по строкам
        {
            for (int h = 0; h < n; h++)  // цикл по столбцам
            {
                printf("%5f ", d[h][g]/de*pow(-1,h+g)); // 5 знакомест под элемент массива
            }
            printf("\n");
        }

    }
    return 0;
}
